* Table of contents                                                     :TOC:
 - [[#windows][Windows]]
 - [[#transpose-chars-or-region][Transpose chars or region]]
 - [[#change-theme][Change theme]]
 - [[#evaluating-sexps][Evaluating Sexps]]
 - [[#expand-region][Expand region]]
 - [[#commentuncomment-region][Comment/Uncomment region]]
 - [[#search][Search]]
 - [[#search-in-other][Search in other]]
 - [[#better-m-x-using-smex][Better ~M-x~ using smex]]
 - [[#multiple-cursors][Multiple cursors]]
 - [[#jump-to-characters][Jump to characters]]
 - [[#query-replace-using-regexps][Query replace using regexps]]
 - [[#dired][Dired]]
 - [[#scroll-with-arrows][Scroll with arrows]]
 - [[#join-lines-a-la-vim][Join lines a la vim]]
 - [[#kill-buffer-and-file][Kill buffer and file]]
 - [[#git][Git]]
 - [[#org][Org]]
 - [[#idomenu][idomenu]]

* Windows

| C-x 9      | Close the other window.                       |
| C-M-1      | Delete other window.                          |
| C-M-2      | Split window horizontally selecting a buffer. |
| C-M-3      | Split window vertically selecting a buffer.   |
| C-M-0      | Delete split.                                 |
| C-M-o      | Switch other window.                          |
| s-<up>     | Enlarge window.                               |
| s-<down>   | Shrink window.                                |
| s-M-<up>   | Enlarge window horizontally.                  |
| s-M-<down> | Shrink window horizontally.                   |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (defun split-window-other-buffer-below (buffer)
    (interactive "b")
    (split-window-other-buffer 'split-window-below buffer))

  (defun split-window-other-buffer-right (buffer)
    (interactive "b")
    (split-window-other-buffer 'split-window-right buffer))

  (defun split-window-other-buffer (strategy buffer)
    (select-window (funcall strategy))
    (switch-to-buffer buffer))

  (global-set-key (kbd "C-M-1") 'delete-other-windows)
  (global-set-key (kbd "C-M-2") 'split-window-other-buffer-below)
  (global-set-key (kbd "C-M-3") 'split-window-other-buffer-right)
  (global-set-key (kbd "C-M-0") 'delete-window)
  (global-set-key (kbd "C-M-o") 'other-window)
  (global-set-key (kbd "C-x 9") 'quit-other-window)
  (global-set-key (kbd "s-<up>") 'enlarge-window)
  (global-set-key (kbd "s-<down>") 'shrink-window)
  (global-set-key (kbd "s-M-<up>") 'enlarge-window-horizontally)
  (global-set-key (kbd "s-M-<down>") 'shrink-window-horizontally)
  (window-numbering-mode)
#+END_SRC

* Transpose chars or region

| C-t | Transpose chars or region if active region |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (defun transpose-chars1 (arg)
      "Same as `transpose-chars' but if region is active transpose 
  all characters in the region."
    (interactive "*P")
    (if (region-active-p)
        (insert
         (apply #'string
                (reverse
                 (string-to-list
                  (delete-and-extract-region (region-beginning)
                                             (region-end))))))
      (call-interactively #'transpose-chars)))
  (global-set-key (kbd "C-t") 'transpose-chars1)
#+END_SRC

* Change theme

| F8 | Change theme. |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key [f8] 'use-next-theme)
#+END_SRC

* Evaluating Sexps

| C-x C-e         | Show the result in the minibuffer.             |
| C-u C-x C-e     | Write the result after the sexp in the buffer. |
| C-u C-u C-x C-e | Replace sexp with the actual result.           |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C-x C-e") 'ext/eval-last-sexp)
#+END_SRC

* Expand region

| C-c e e | Expand region. |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C-c e e") 'er/expand-region)
#+END_SRC

* Comment/Uncomment region

| C-; | comment/uncumment region. |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C-;") 'comment-or-uncomment)
#+END_SRC

* Search

| C-s | Search forward using regexp.  |
| C-r | Search backward using regexp. |
While searching
| C-return | Put cursor at the beginning of the match |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C-s") 'isearch-forward-regexp)
  (global-set-key (kbd "C-r") 'isearch-backward-regexp)

  (defvar isearch-done-opposite nil "Wether or not isearch must end at the opposite end.")

  (defun isearch-done-opposite (&optional nopush edit)
    (interactive)
    (let ((isearch-done-opposite t))
      (funcall #'isearch-done nopush edit)))

  (defadvice isearch-done (after isearch-goto-beginning-of-match activate)
    "After finding a match position put the cursor at the beginning of
  the match only if searching forward."
    (when isearch-done-opposite
        (goto-char isearch-other-end)))

  (define-key isearch-mode-map (kbd "C-<return>") 'isearch-done-opposite)

  (define-key isearch-mode-map (kbd "M-o") 'isearch-occur)

  (defadvice isearch-occur (after isearch-occur-switch-to-occur-buffer activate)
    (switch-to-buffer-other-window "*Occur*"))

#+END_SRC

* Search in other

| C-M-s | Search forward in other window.  |
| C-M-r | Search backward in other window. |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (defun isearch-forward-regexp-other-window ()
    (interactive)
    (save-selected-window
      (other-window 1)
      (isearch-forward-regexp)))

  (defun isearch-backward-regexp-other-window ()
    (interactive)
    (save-selected-window
      (other-window 1)
      (isearch-backward-regexp)))

  (global-set-key (kbd "C-M-s") 'isearch-forward-regexp-other-window)
  (global-set-key (kbd "C-M-r") 'isearch-backward-regexp-other-window)
#+END_SRC

* Better ~M-x~ using smex

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
#+END_SRC

* Multiple cursors

| C->         | Put a cursor in next line.           |
| C-<         | Put a cursor in previous line.       |
| C-S-c C-S-c | Put a cursor in each region line.    |
| C-c C-0     | Mark all like the current selection. |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-S-c C-S-c") 'mc/edit-lines)
  (global-set-key (kbd "C-M->") 'mc/skip-to-next-like-this)
  (global-set-key (kbd "C-M-<") 'mc/skip-to-previous-like-this)
  (global-set-key (kbd "C-c C-0") 'mc/mark-all-like-this)
#+END_SRC

* Jump to characters

| C-c j j | Jump to starting word character. |
| C-c j l | Jump to line.                    |
| C-c j j | Jump to word character.          |

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (autoload 'ace-jump-mode "ace-jump-mode")
  (global-set-key (kbd "C-c j j") 'ace-jump-mode)
  (global-set-key (kbd "C-c j l") 'ace-jump-line-mode)
  (global-set-key (kbd "C-c j c") 'ace-jump-char-mode)
#+END_SRC

* Query replace using regexps
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "M-%") 'query-replace-regexp)
#+END_SRC

* Dired
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (require 'dired-imenu)
  (require 'dired-x)
  (put 'dired-find-alternate-file 'disabled nil)
  (mykie:set-keys dired-mode-map
    "^" :default (find-alternate-file "..") :C-u dired-up-directory)
#+END_SRC

* Scroll with arrows
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key [down] 'scroll-up-one-line-command)
  (global-set-key [up] 'scroll-down-one-line-command)
#+END_SRC

* Join lines a la vim
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "M-j") 'join-line-below)
#+END_SRC

* Kill buffer and file
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (mykie:set-keys nil
    "C-x k" :default kill-buffer :C-u kill-buffer-and-file)
#+END_SRC

* Git

#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (global-set-key (kbd "C-c g p") 'git-messenger:popup-message)
  (global-set-key (kbd "C-c g s") 'magit-status)
  (global-set-key (kbd "C-c g b") 'magit-blame-mode)
  (global-set-key (kbd "C-c g d") 'magit-diff)
#+END_SRC

* Org
#+BEGIN_SRC elisp :tangle ~/.emacs.d/keybindings.el
  (autoload 'org-toc-insert-toc "org-toc")
  (global-set-key (kbd "C-c o t") 'org-toc-insert-toc)
#+END_SRC

* idomenu
#+BEGIN_SRC elisp
  (autoload 'idomenu "idomenu")
  (global-set-key (kbd "C-.") 'idomenu)
#+END_SRC
