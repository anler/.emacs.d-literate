* Table of contents                                                     :TOC:
 - [[#colorize-code-blocks][Colorize code blocks]]
 - [[#display-inline-images][Display inline images]]
 - [[#export-latex-fragments][Export LaTeX fragments]]
 - [[#more-headlines-to-export][More headlines to export]]
 - [[#set-org-files-directory][Set org files directory]]
 - [[#set-notes-file][Set notes file]]
 - [[#activate-babel-languages][Activate babel languages]]
 - [[#export-code-blocks-with-colors][Export code blocks with colors]]
 - [[#ditaa-executable-path][Ditaa executable path]]
 - [[#encrypting][Encrypting]]

* Colorize code blocks
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-src-fontify-natively t)
#+END_SRC

* Display inline images
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-html-inline-images t)
#+END_SRC

* Export LaTeX fragments
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-export-with-LaTeX-fragments t)
#+END_SRC

* More headlines to export
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-export-headline-levels 6)
#+END_SRC

* Set org files directory
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-directory "~/org"
        org-agenda-files '("~/org"))
#+END_SRC

* Set notes file
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-default-notes-file (concat org-directory "/notes.org")
        org-capture-templates
        '(("t" "Todo" entry (file+headline (concat org-directory "/gtd.org") "Tasks")
           "* TODO %?\n %i\n %a")
          ("d" "Literate" entry (file+headline (concat org-directory "/literate.org") "Literate")
           "* %?\n %i\n %a")
          ("n" "Note" entry (file+headline (concat org-directory "/notes.org") "Notes")
           "* %?")
          ("j" "Journal" entry (file+datetree (concat org-directory "/journal.org"))
           "* %?" :clock-in t :clock-resume t)
          ("l" "Read it later" checkitem (file+headline (concat org-directory "/readlater.org") "Read it later")
           "[ ] %?")))
#+END_SRC

* Activate babel languages
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (lisp . t)
     (gnuplot . t)
     (dot . t)
     (ditaa . t)
     (R . t)
     (python . t)
     (ruby . t)
     (js . t)
     (clojure . t)
     (sh . t)))
#+END_SRC

* Export code blocks with colors
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (require 'ox-latex)
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
          "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"))
#+END_SRC

There are different color-themes you can use with minted, for example
you could put this option into your org file to use "monokai":
#+BEGIN_SRC org :tangle
  ,#+LaTeX_HEADER: \usemintedstyle{monokai}
#+END_SRC

To get a list of the supported styles from pygmentize:
#+BEGIN_SRC sh :tangle
  pygmentize -L styles
#+END_SRC

* Ditaa executable path
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (setq org-ditaa-jar-path ""
        org-babel-ditaa-java-cmd "ditaa")
#+END_SRC

* Encrypting
*** Options
#+BEGIN_SRC elisp :tangle ~/.emacs.d/org.el
  (require 'epa-file)
  (require 'org-crypt )

  (setq org-tags-exclude-from-inheritance '("crypt"))
#+END_SRC

*** Private                                                           :crypt:
-----BEGIN PGP MESSAGE-----
Version: GnuPG v2.0.22 (GNU/Linux)

hQEMAxWSuK3W+kssAQf/Xn/8ehLrOG+9/0N+jX+Ev+w2dRBgKAzTjheHsLhdsuIu
iDiK+jSEvBkBtd+dx9Sa1R2DWvKuG6d8/IhSZ3Qf/dyRAnR3muJSyOZDPNIcKIym
WyjrGaxycrYamRwu/t5pZar05tPzbyZ5t/X+PZaVdI5w2B0Qb5Pvp0mQvzXxiKC2
LSKCmxpiL3G81lkrIZqvJrqbk8ikUBGyKG1dK31G2e0jqqSoouf5WIQfj7moC0ZA
UPLILDpVxde6S8SqepW3hniO+672LqfUGI5RQQcS554hw3PgbF/0Al3jxQw+lzDx
dBjPpcFs9Q9iMXlQ+i0gHe87UjOH7f5hLt8ROb4x/dKcARa4EfI7RNGkdKCcv21T
gaqJ2QX8ABfIGeo2a7WHWubSLuiB7tSMMBadHDQH6caSXnPKcTXST159aeF15qNY
IsLd8YScWuIfXvEQmqjcIKEZ82QHuIKMT6RV8iret7ySXzI/OqVNeJQbV4PZvpxw
yziKVRL8P2PtotxNYkfyP3edSpr+ZiD8IVtUI0sqgvYmKcrBBuwsZ2RfD/RB
=efPi
-----END PGP MESSAGE-----
